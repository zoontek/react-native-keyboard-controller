"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[214],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>v});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function d(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=o.createContext({}),c=function(e){var t=o.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),u=c(r),v=n,b=u["".concat(l,".").concat(v)]||u[v]||p[v]||a;return r?o.createElement(b,i(i({ref:t},s),{},{components:r})):o.createElement(b,i({ref:t},s))}));function v(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=u;var d={};for(var l in t)hasOwnProperty.call(t,l)&&(d[l]=t[l]);d.originalType=e,d.mdxType="string"==typeof e?e:n,i[1]=d;for(var c=2;c<a;c++)i[c]=r[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}u.displayName="MDXCreateElement"},9216:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>d,toc:()=>c});var o=r(7462),n=(r(7294),r(3905));const a={sidebar_position:3,keywords:["react-native-keyboard-controller","KeyboardControllerView","view"]},i="KeyboardControllerView",d={unversionedId:"api/keyboard-controller-view",id:"version-1.9.0/api/keyboard-controller-view",title:"KeyboardControllerView",description:"A plain react-native View with some additional methods and props. Used internally in KeyboardProvider",source:"@site/versioned_docs/version-1.9.0/api/keyboard-controller-view.md",sourceDirName:"api",slug:"/api/keyboard-controller-view",permalink:"/react-native-keyboard-controller/docs/1.9.0/api/keyboard-controller-view",draft:!1,editUrl:"https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/docs/versioned_docs/version-1.9.0/api/keyboard-controller-view.md",tags:[],version:"1.9.0",sidebarPosition:3,frontMatter:{sidebar_position:3,keywords:["react-native-keyboard-controller","KeyboardControllerView","view"]},sidebar:"tutorialSidebar",previous:{title:"KeyboardProvider",permalink:"/react-native-keyboard-controller/docs/1.9.0/api/keyboard-provider"},next:{title:"KeyboardGestureArea",permalink:"/react-native-keyboard-controller/docs/1.9.0/api/keyboard-gesture-area"}},l={},c=[{value:"Props",id:"props",level:2},{value:"<code>onKeyboardMoveStart</code>",id:"onkeyboardmovestart",level:3},{value:"<code>onKeyboardMove</code>",id:"onkeyboardmove",level:3},{value:"<code>onKeyboardMoveInteractive</code>",id:"onkeyboardmoveinteractive",level:3},{value:"<code>onKeyboardMoveEnd</code>",id:"onkeyboardmoveend",level:3},{value:"<code>onFocusedInputLayoutChanged</code>",id:"onfocusedinputlayoutchanged",level:3},{value:"<code>statusBarTranslucent</code>",id:"statusbartranslucent",level:3},{value:"<code>navigationBarTranslucent</code>",id:"navigationbartranslucent",level:3},{value:"<code>enabled</code>",id:"enabled",level:3}],s={toc:c};function p(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"keyboardcontrollerview"},"KeyboardControllerView"),(0,n.kt)("p",null,"A plain react-native ",(0,n.kt)("inlineCode",{parentName:"p"},"View")," with some additional methods and props. Used internally in ",(0,n.kt)("a",{parentName:"p",href:"/react-native-keyboard-controller/docs/1.9.0/api/keyboard-provider"},"KeyboardProvider")),(0,n.kt)("h2",{id:"props"},"Props"),(0,n.kt)("h3",{id:"onkeyboardmovestart"},(0,n.kt)("inlineCode",{parentName:"h3"},"onKeyboardMoveStart")),(0,n.kt)("p",null,"A callback function which is fired when keyboard starts a transition from one to another state (from closed to open, for example)."),(0,n.kt)("h3",{id:"onkeyboardmove"},(0,n.kt)("inlineCode",{parentName:"h3"},"onKeyboardMove")),(0,n.kt)("p",null,"A callback function which is fired every time, when keyboard changes its position on the screen."),(0,n.kt)("h3",{id:"onkeyboardmoveinteractive"},(0,n.kt)("inlineCode",{parentName:"h3"},"onKeyboardMoveInteractive")),(0,n.kt)("p",null,"A callback function which is fired every time, when user drags keyboard."),(0,n.kt)("h3",{id:"onkeyboardmoveend"},(0,n.kt)("inlineCode",{parentName:"h3"},"onKeyboardMoveEnd")),(0,n.kt)("p",null,"A callback function which is fired when keyboard finished a transition from one to another state (from closed to open, for example)."),(0,n.kt)("h3",{id:"onfocusedinputlayoutchanged"},(0,n.kt)("inlineCode",{parentName:"h3"},"onFocusedInputLayoutChanged")),(0,n.kt)("p",null,"A callback function which is fired when layout of focused input gets changed."),(0,n.kt)("h3",{id:"statusbartranslucent"},(0,n.kt)("inlineCode",{parentName:"h3"},"statusBarTranslucent")),(0,n.kt)("p",null,"A boolean prop to indicate whether ",(0,n.kt)("inlineCode",{parentName:"p"},"StatusBar")," should be translucent on ",(0,n.kt)("inlineCode",{parentName:"p"},"Android")," or not."),(0,n.kt)("h3",{id:"navigationbartranslucent"},(0,n.kt)("inlineCode",{parentName:"h3"},"navigationBarTranslucent")),(0,n.kt)("p",null,"A boolean prop to indicate whether ",(0,n.kt)("a",{parentName:"p",href:"https://m2.material.io/design/platform-guidance/android-bars.html#android-navigation-bar"},"NavigationBar")," should be translucent on ",(0,n.kt)("inlineCode",{parentName:"p"},"Android")," or not."),(0,n.kt)("h3",{id:"enabled"},(0,n.kt)("inlineCode",{parentName:"h3"},"enabled")),(0,n.kt)("p",null,"A boolean prop indicating whether the view is active or not. If it's ",(0,n.kt)("inlineCode",{parentName:"p"},"true")," then it moves application to ",(0,n.kt)("a",{parentName:"p",href:"https://developer.android.com/training/gestures/edge-to-edge"},"edge-to-edge")," mode on Android and setup keyboard callbacks. When ",(0,n.kt)("inlineCode",{parentName:"p"},"false")," - moves app away from ",(0,n.kt)("a",{parentName:"p",href:"https://developer.android.com/training/gestures/edge-to-edge"},"edge-to-edge")," and removes keyboard listeners."))}p.isMDXComponent=!0}}]);