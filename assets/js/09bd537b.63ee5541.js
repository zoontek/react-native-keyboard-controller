"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[177],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),d=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=d(n),u=r,y=m["".concat(l,".").concat(u)]||m[u]||p[u]||a;return n?o.createElement(y,i(i({ref:t},c),{},{components:n})):o.createElement(y,i({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var d=2;d<a;d++)i[d]=n[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5432:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_position:1,keywords:["react-native-keyboard-controller","keyboard animation","keyboard handling","keyboard movement"]},i="First animation",s={unversionedId:"guides/first-animation",id:"version-1.8.0/guides/first-animation",title:"First animation",description:"To build your first animation you will need to use two hooks: useKeyboardAnimation or useReanimatedKeyboardAnimation.",source:"@site/versioned_docs/version-1.8.0/guides/first-animation.md",sourceDirName:"guides",slug:"/guides/first-animation",permalink:"/react-native-keyboard-controller/docs/1.8.0/guides/first-animation",draft:!1,editUrl:"https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/docs/versioned_docs/version-1.8.0/guides/first-animation.md",tags:[],version:"1.8.0",sidebarPosition:1,frontMatter:{sidebar_position:1,keywords:["react-native-keyboard-controller","keyboard animation","keyboard handling","keyboard movement"]},sidebar:"tutorialSidebar",previous:{title:"Guides",permalink:"/react-native-keyboard-controller/docs/1.8.0/category/guides"},next:{title:"Building own hook",permalink:"/react-native-keyboard-controller/docs/1.8.0/guides/building-own-hook"}},l={},d=[{value:"Example",id:"example",level:2}],c={toc:d};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"first-animation"},"First animation"),(0,r.kt)("p",null,"To build your first animation you will need to use two hooks: ",(0,r.kt)("a",{parentName:"p",href:"/react-native-keyboard-controller/docs/1.8.0/api/hooks/keyboard/use-keyboard-animation"},"useKeyboardAnimation")," or ",(0,r.kt)("a",{parentName:"p",href:"/react-native-keyboard-controller/docs/1.8.0/api/hooks/keyboard/use-reanimated-keyboard-animation"},"useReanimatedKeyboardAnimation"),"."),(0,r.kt)("p",null,"Both of them return an object with two properties: ",(0,r.kt)("inlineCode",{parentName:"p"},"progress")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"height")," (depends on the hook used, values will be ",(0,r.kt)("inlineCode",{parentName:"p"},"Animated.Value")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Reanimated.SharedValue"),")."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"useKeyboardAnimation")," returns Animated values with enabled ",(0,r.kt)("strong",{parentName:"p"},"Native Driver")," (",(0,r.kt)("inlineCode",{parentName:"p"},"useNativeDriver: true"),"). Thus some properties can not be animated, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"height"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"backgroundColor"),", etc.")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"useReanimatedKeyboardAnimation")," works only with ",(0,r.kt)("inlineCode",{parentName:"p"},"SharedValues"),", i.e. it is not compatible with Reanimated v1 API.")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"To see how to use these hooks let's consider example below (for more comprehensive usage you may find an ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/example"},"example")," app useful):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\nimport { Animated, StyleSheet, TextInput, View } from "react-native";\nimport { useKeyboardAnimation } from "react-native-keyboard-controller";\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: "center",\n    justifyContent: "flex-end",\n  },\n  box: {\n    width: 60,\n    height: 60,\n    marginVertical: 20,\n  },\n  row: {\n    flexDirection: "row",\n  },\n});\n\nexport default function KeyboardAnimation() {\n  // 1. we need to use hook to get an access to animated values\n  const { height, progress } = useKeyboardAnimation();\n\n  const scale = progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [1, 2],\n  });\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.row}>\n        <Animated.View\n          style={{\n            width: 50,\n            height: 50,\n            backgroundColor: "#17fc03",\n            borderRadius: 15,\n            // 2. we can apply any transformations we want\n            transform: [{ translateY: height }, { scale }],\n          }}\n        />\n      </View>\n      <TextInput\n        style={{\n          width: "100%",\n          marginTop: 50,\n          height: 50,\n          backgroundColor: "yellow",\n        }}\n      />\n    </View>\n  );\n}\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you are going to use these Animated values in class components (i.e. without hooks) - you can easily ",(0,r.kt)("a",{parentName:"p",href:"/react-native-keyboard-controller/docs/1.8.0/api/hooks/keyboard/use-keyboard-animation"},"do")," it. Check out ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kirillzyusko/react-native-keyboard-controller/blob/cf27eb00877db34b860a04cf52a026110e44b4b3/src/animated.tsx#L46-L51"},"source")," code - this hook simply changes ",(0,r.kt)("inlineCode",{parentName:"p"},"softInputMode")," and consumes ",(0,r.kt)("inlineCode",{parentName:"p"},"Context"),". Also you may read ",(0,r.kt)("a",{parentName:"p",href:"/react-native-keyboard-controller/docs/1.8.0/recipes/architecture"},"architecture")," deep dive to understand more about how this library works.")))}p.isMDXComponent=!0}}]);